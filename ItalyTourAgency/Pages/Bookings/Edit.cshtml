@page
@model ItalyTourAgency.Pages.Bookings.EditModel

@{
    ViewData["Title"] = "Reschedule Booking";
}

<div class="container mt-5">
    <h4>Reschedule Booking</h4>
    <hr />

    <div class="row">
        <div class="col-md-6">
            <form method="post" id="rescheduleForm">
                <input type="hidden" asp-for="Booking.Id" />
				<input type="hidden" asp-for="Booking.UserId" />

                <div class="form-group mb-4">
                    <label class="form-label fw-bold">Selected Tour:</label>
                    <p class="form-control-static">
                        @(Model.OriginalTourInstance?.Tour?.Name ?? "Tour information not available")
                    </p>
                </div>

                <div class="form-group mb-4">
                    <label class="form-label fw-bold">Current Tour Start Date:</label>
                    <p class="form-control-static">
                        @(Model.OriginalTourInstance?.StartDate.ToString("yyyy-MM-dd") ?? "Date not available")
                    </p>
                </div>

               <div class="form-group mb-4">
                    <label asp-for="SelectedDate" class="form-label fw-bold">New Tour Date</label>
                    <input type="date" asp-for="SelectedDate" class="form-control"
                           min="2025-05-04" id="datePicker" required />
                    <span asp-validation-for="SelectedDate" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <button type="submit" class="btn btn-primary">Confirm Reschedule</button>
                    <a asp-page="./Index" class="btn btn-secondary">Cancel</a>
                </div>
            </form>
        </div>
        <div class="col-md-6">
            <h5>Available Date Ranges:</h5>
            <ul class="list-group">
                @foreach (var range in Model.AvailableDateRanges)
                {
                    <li class="list-group-item">
                        @range.StartDate.ToString("yyyy-MM-dd") to @range.EndDate.ToString("yyyy-MM-dd")
                    </li>
                }
            </ul>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <div id="dateError" class="text-danger d-none mt-2"></div>

    <script>
        // Extract start dates for validation
        const availableStartDates = @Html.Raw(Json.Serialize(
        Model.AvailableDateRanges.Select(r => r.StartDate.ToString("yyyy-MM-dd"))));

        const datePicker = document.getElementById('datePicker');
        const errorDiv = document.getElementById('dateError'); // Get the error div

        datePicker.addEventListener('change', function(e) {
            const selectedDate = e.target.value;

            // Clear previous error message
            errorDiv.textContent = '';
            errorDiv.classList.add('d-none');

            // Only validate if a date is actually selected
            if (selectedDate && !availableStartDates.includes(selectedDate)) {
                errorDiv.textContent = `Client-side check: No available tours starting on ${selectedDate}. Please select a valid start date from the list.`;
                errorDiv.classList.remove('d-none');
                // DO NOT CLEAR THE VALUE: e.target.value = ''; // REMOVED THIS LINE
            }
        });

        // Optional: You can enhance the submit validation too, but the core issue
        // was the clearing in the 'change' event.
        document.getElementById('rescheduleForm').addEventListener('submit', function(e) {
            const selectedDate = datePicker.value;

            // Clear previous error message before submit validation
             errorDiv.textContent = '';
             errorDiv.classList.add('d-none');

            if (!selectedDate) {
                 e.preventDefault(); // Prevent submission if no date selected
                 errorDiv.textContent = "Please select a date before submitting.";
                 errorDiv.classList.remove('d-none');
            } else if (!availableStartDates.includes(selectedDate)) {
                e.preventDefault(); // Prevent submission if the date is known to be invalid client-side
                errorDiv.textContent = "The selected date is not a valid start date for an available tour.";
                errorDiv.classList.remove('d-none');
            }
             // Allow submission if a date is selected, even if the client-side check failed earlier.
             // The server will perform the definitive validation.
        });
    </script>
}